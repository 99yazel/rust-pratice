use std::io;
// 사용자 입력을 받고 결과값을 표시하기 위해서는 io (input/output) 라이브러리를 스코프로 가져와야 합니다. 
// 러스트는 모든 프로그램의 스코프에 prelude 내의 타입들을 가져옵니다. 
// 만약 여러분이 원하는 타입이 prelude에 없다면 use문을 활용하여 명시적으로 그 타입을 가져와야 합니다. 
fn main() {
    println!("Guess the number!");

    println!("Please input your guess.");

    // 러스트에서 변수는 기본적으로 불변입니다. 
    // 다음 예시는 변수 앞에 mut을 이용하여 가변변수를 만드는 법을 보여줍니다.
    let mut guess = String::new();
    // String은 표준 라이브러리에서 제공하는 확장 가능한(growable) UTF-8 인코딩의 문자열 타입입니다.

    // 만약 프로그램 시작점에 use std::io가 없다면 함수 호출 시 std::io::stdin처럼 작성해야 합니다. 
    io::stdin().read_line(&mut guess)
    .expect("Failed to read Line"); //긴 라인을 나누기 위해 다음 줄과 여백을 넣는 것이 바람직합니다.
    
    /*
    &는 코드의 여러 부분에서 데이터를 여러 번 메모리로 복사하지 않고 접근하기 위한 방법을 제공하는 참조자 임을 나타냅니다. 
    참조자는 복잡한 특성으로서 러스트의 큰 이점 중 하나가 참조자를 사용함으로써 얻는 안전성과 용이성입니다.
    지금 당장은 참조자가 변수처럼 기본적으로 불변임을 알기만 하면 됩니다.
    따라서 가변으로 바꾸기 위해 &guess가 아니라 &mut guess로 작성해야 합니다.
    */
    
    /*
    러스트는 표준 라이브러리에 여러 종류의 Result 타입을 가지고 있습니다. 제네릭 Result이나 io:Result가 그 예시입니다.
    Result 타입은 열거형(enumerations)로써 enums 라고 부르기도 합니다. 
    열거형은 정해진 값들만을 가질 수 있으며 이러한 값들은 열거형의 variants 라고 부릅니다. 
     */

    println!("You guessed: {}", guess);
    /*
    이 라인은 사용자가 입력한 값을 저장한 문자열을 출력합니다. {}는 변경자로써 값이 표시되는 위치를 나타냅니다. 
    {}를 이용하여 하나 이상의 값을 표시할 수도 있습니다. 첫번째 {}는 형식 문자열(format string) 이후의 첫번째 값을 표시하며, 두번째 {}는 두번째 값을 나타내며 이후에도 비슷하게 작동합니다.
    */
}

/*
:: 정적 메서드
. 메서드
*/